/* FILE: ocport.h             -*-Mode: c++-*-
 *
 * Machine specific #define's and typedef's, generated by [Oc_MakePortHeader]
 *
 */

#ifndef _OC_PORT
#define _OC_PORT

#define OOMMF_API_INDEX 20120928

#include <stdlib.h>
#include <limits.h>
#include <cfloat>
#include <cmath>

// See Stroustrup, Section 16.1.3.
#include <exception>		// The base class std::exception and the
				// standard exception std::bad_exception
#include <new>			// The standard exception std::bad_alloc
#include <typeinfo>		// The standard exceptions std::bad_cast
				// and std::bad_typeid
#define OC_THROW(x) throw x

/* For unix */
#include <fcntl.h>
#include <unistd.h>
#include <sys/types.h>
#include <sys/wait.h>  /* Child process cleanup */

/* End includes */

#define CONFIG_TCL_MAJOR_VERSION 8
#define CONFIG_TCL_MINOR_VERSION 4
#define CONFIG_TK_MAJOR_VERSION 8
#define CONFIG_TK_MINOR_VERSION 4
#define CONFIG_TCL_PATCH_LEVEL "8.4.13"
#define CONFIG_TK_PATCH_LEVEL "8.4.13"
#define CONFIG_TCL_RELEASE_LEVEL 2
#define CONFIG_TCL_RELEASE_SERIAL 13
#define CONFIG_TK_RELEASE_LEVEL 2
#define CONFIG_TK_RELEASE_SERIAL 13
#define OC_USE_STD_NAMESPACE using namespace std
#define OC_USE_EXCEPTION typedef std::exception EXCEPTION
#define OC_USE_BAD_ALLOC typedef std::bad_alloc BAD_ALLOC
#define OC_USE_STRING typedef std::string String

/* Substitute domain checked atan2 */
#define atan2(y,x) Oc_Atan2((y),(x))

/* Wrapper for system getpid call */
inline int Oc_GetPid() { return getpid(); }

/* Dummy wrapper for ansi-compliant sprintf */
#define OC_SPRINTF_WRAP(x) (x)

/* Platform supports vsnprintf */
#define OC_HAS_VSNPRINTF 1

/* Variable type declarations.  The '****#m' */
/* types are at *least* '#' bytes wide.      */
typedef  int                OC_BOOL;
typedef  unsigned char      OC_BYTE;
typedef  char               OC_CHAR;
typedef  unsigned char      OC_UCHAR;
typedef  char               OC_SCHAR;

typedef  float              OC_REAL4;
typedef  double             OC_REAL8;
typedef  float              OC_REAL4m;
typedef  double             OC_REAL8m;
typedef  long double        OC_REALWIDE;  /* Widest native float */
#define OC_REAL8m_IS_DOUBLE 1
#define OC_REAL8m_IS_REAL8 1
#define OC_REALWIDE_IS_REAL8 0

#define OC_REAL4_EPSILON       1.1920929e-07
#define OC_SQRT_REAL4_EPSILON  0.000345266983
#define OC_REAL8_EPSILON       2.2204460492503131e-16
#define OC_SQRT_REAL8_EPSILON  1.4901161193847656e-08
#define OC_CUBE_ROOT_REAL8_EPSILON 6.0554544523933429e-06

#define OC_FP_DOUBLE_EXTRA_PRECISION 1
#define OC_FP_LONG_DOUBLE_EXTRA_PRECISION 0

typedef  short              OC_INT2;
typedef  unsigned short     OC_UINT2;
typedef  int                OC_INT4;
typedef  unsigned int       OC_UINT4;
typedef  long                OC_INT8;
typedef  unsigned long       OC_UINT8;
typedef  int                OC_INT2m;
typedef  unsigned int       OC_UINT2m;
typedef  int                OC_INT4m;
typedef  unsigned int       OC_UINT4m;
typedef  long               OC_INT8m;
typedef  unsigned long      OC_UINT8m;
#define OC_HAS_INT2 1
#define OC_HAS_INT4 1
#define OC_HAS_INT8 1
#define OC_HAS_INT16 0

/* Width of integer types */
#define OC_INT_WIDTH 4
#define OC_LONG_WIDTH 8
#define OC_INT4m_WIDTH 4
#define OC_INT8m_WIDTH 8

/* Width of pointer type */
#define OC_POINTER_WIDTH 8

/* OC_INDEX is the suggested type for array indices.  */
/*   It is a signed int type that is at least 4 bytes */
/*   wide and not narrower than the pointer type.     */
/* OC_UINDEX is the unsigned version of OC_INDEX.  It */
/*   is intended for special-purpose use only; use    */
/*   OC_INDEX where possible.                         */
typedef long OC_INDEX;
typedef unsigned long OC_UINDEX;
#define OC_INDEX_WIDTH 8
#define OC_INDEX_CHECKS 0

#define OC_BYTEORDER 4321

#define OC_USE_X87 1

/* Use SSE intrinsics, level 2 and lower */
/* Macro OC_USE_SSE is similar to OC_SSE_LEVEL, but is only true
 * if SSE level is at least 2, and the OC_REAL8m type is 8 bytes wide
 * (and therefore agrees with the SSE double precision type.)
 */
#define OC_SSE_LEVEL 2
#if OC_SSE_LEVEL>1 && OC_REAL8m_IS_REAL8 && OC_HAS_INT8
# define OC_USE_SSE OC_SSE_LEVEL
  union OC_SSE_MASK {
     OC_UINT8 imask;
     OC_REAL8 dval;
  };
#else
# define OC_USE_SSE 0
#endif

// SSE intrinsic _mm_cvtsd_f64 not provided by compiler
#define OC_COMPILER_HAS_MM_CVTSD_F54 0

/* Build in thread (multi-processing) support */
#define OOMMF_THREADS 0

/* Child threads don't need to have floating point control word explicitly set. */
#define OC_CHILD_COPY_FPU_CONTROL_WORD 0

/* Don't use NUMA (non-uniform memory access) libraries */
#define OC_USE_NUMA 0

#define OC_PAGESIZE 4096 /* Natural system memory blocksize, in bytes. */
#define OC_CACHE_LINESIZE 64 /* L1 data cache line size, in bytes. */

/* System type info */
#define OC_UNIX 1
#define OC_WINDOWS 2
#define OC_VANILLA 4
#define OC_DARWIN 5
#define OC_CYGWIN 6
#define OC_WINNT 7
#define OC_SYSTEM_TYPE OC_UNIX
#define OC_SYSTEM_SUBTYPE OC_VANILLA
#define OC_TCL_TYPE OC_UNIX

/* Random number generator.  Default is Oc_Random, which is an   */
/* implementation of the GLIBC random() function with default    */
/* state size.  You can replace this with your own random number */
/* generator if desired.                                         */
/* NB: Any code that uses the default macro settings (involving  */
/*     Oc_Random), must also #include "oc.h" in order to get the */
/*     definition of the Oc_Random class.                        */
#define OMF_SRANDOM(seed)  Oc_Random::Srandom(seed)
#define OMF_RANDOM()       Oc_Random::Random()
#define OMF_RANDOM_MAX     Oc_Random::MaxValue()

/* Signal handler prototype, to work around some non-ANSI header files */
extern "C" {
typedef void(*omf_sighandler)(int);             /* ANSI version */
/* typedef void(*omf_sighandler)(int, ...); */  /* Not ANSI */
}

/* For unix */
/* NICE_DEFAULT is the value passed to nice() inside  */
/* MakeNice().                                        */
#define NICE_DEFAULT 9
/* If your system doesn't have nice, uncomment the next line, or put */
/* in a suitable replacement macro (using, perhaps, setpriority()?). */
/*#define nice(x) 0 */

/* Directory path separator; Unix uses '/', DOS uses '\'. */
#define DIRSEPCHAR '/'
#define DIRSEPSTR  "/"
#define PATHSPLITSTR ":"

/* Definitions for Oc_TimeVal class */
typedef unsigned long OC_TIMEVAL_TICK_TYPE;
#define OC_TIMEVAL_TO_DOUBLE(x) double(x)

/*_________________________DEFINITIONS FOR GPU___________________________________*/
#define BLK_SIZE 128
#define CHOOSESINGLE
#define DEV_NUM 0

#ifdef CHOOSESINGLE
#ifndef FD_TYPE
#define FD_TYPE float
#endif
#ifndef FD_TYPE3
#define FD_TYPE3 float3
#endif
#ifndef FD_CPLX_TYPE
#define FD_CPLX_TYPE cuComplex
#endif
#ifndef FWDFFT_METHOD
#define FWDFFT_METHOD CUFFT_R2C
#endif
#ifndef BWDFFT_METHOD
#define BWDFFT_METHOD CUFFT_C2R
#endif
#ifndef FWDFFT_EXE
#define FWDFFT_EXE cufftExecR2C
#endif
#ifndef BWDFFT_EXE
#define BWDFFT_EXE cufftExecC2R
#endif
#endif
#ifdef CHOOSEDOUBLE
#ifndef FD_TYPE
#define FD_TYPE double
#endif
#ifndef FD_TYPE3
#define FD_TYPE3 double3
#endif
#ifndef FD_CPLX_TYPE
#define FD_CPLX_TYPE cuDoubleComplex
#endif
#ifndef FWDFFT_METHOD
#define FWDFFT_METHOD CUFFT_D2Z
#endif
#ifndef BWDFFT_METHOD
#define BWDFFT_METHOD CUFFT_Z2D
#endif
#ifndef FWDFFT_EXE
#define FWDFFT_EXE cufftExecD2Z
#endif
#ifndef BWDFFT_EXE
#define BWDFFT_EXE cufftExecZ2D
#endif
#endif

typedef struct {
FD_TYPE* dev_Ms;
FD_TYPE* dev_Msi;
FD_TYPE* dev_MValue;
FD_TYPE* dev_energy;
FD_TYPE* dev_field;
FD_TYPE* dev_torque;
FD_TYPE* dev_mxmxH;
FD_TYPE* dev_dm_dt;
FD_TYPE* dev_energy_bak;
FD_TYPE* dev_dm_dt_bak;
FD_TYPE* dev_local_sum;
FD_TYPE* dev_vol;
} DEVSTRUCT;
	
#endif /* _OC_PORT_H */
